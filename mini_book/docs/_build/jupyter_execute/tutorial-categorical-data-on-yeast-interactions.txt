import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict 
import seaborn as sns

import os
script_dir = os.path.dirname('__file__') #<-- absolute dir the script is in
rel_path = "datasets/data-BioGrid-Yeast.xlsx"
abs_file_path_SL = os.path.join(script_dir, rel_path)

# os.chdir('mini_book/docs/')
# os.chdir('../')


data=pd.read_excel(abs_file_path_SL,header=0)


data = data[['gene-query-name','gene-target-name','interaction-type', 'paper-source']]

data.head()

print(data.info())

cat_data = data.select_dtypes(include=['object']).copy()

cat_data.head()

if cat_data.isnull().values.sum()==0:
    print('Hooray!! There are no NaN values in the dataframe')
else:
    print(cat_data.isnull().values.sum())

print(cat_data.isnull().sum())

print(cat_data['interaction-type'].value_counts())

print(cat_data['gene-query-name'].value_counts())

print(cat_data['interaction-type'].value_counts().count(),cat_data['gene-query-name'].value_counts().count(),cat_data['gene-target-name'].value_counts().count())

carrier_count = cat_data['interaction-type'].value_counts()
sns.set(style="darkgrid")
sns.barplot(carrier_count.index, carrier_count.values, alpha=0.9)
plt.title('Frequency Distribution of interaction types in BioGrid')
plt.ylabel('Number of Occurrences', fontsize=12)
plt.xlabel('Interaction types', fontsize=12)
plt.xticks(rotation=30)

labels = cat_data['interaction-type'].astype('category').cat.categories.tolist()
replace_map_comp = {'interaction-type' : {k: v for k,v in zip(labels,list(range(1,len(labels)+1)))}}

print(replace_map_comp)

cat_data_replace = cat_data.copy()

cat_data_replace.replace(replace_map_comp, inplace=True)

print(cat_data_replace.head())

cat_data_lc=cat_data.copy().astype('category') # In general converting to a  category variable is much faster and handy that leaves them as object


cat_data_lc['interaction-type'] = cat_data_lc['interaction-type'].cat.codes

cat_data_lc.head() #alphabetically labeled from 0 to number of categories : 27

cat_data_specific = cat_data.copy()
cat_data_specific['SL-code'] = np.where(cat_data_specific['interaction-type'].str.contains('Lethality'), 1, 0)

cat_data_specific.head()

cat_data_specific[cat_data_specific['SL-code']==1].head()

cat_data_sklearn = cat_data.copy()

from sklearn.preprocessing import LabelEncoder

lb_make = LabelEncoder()
cat_data_sklearn['type_code'] = lb_make.fit_transform(cat_data['interaction-type'])

cat_data_sklearn.tail() #Results in appending a new column to df

cat_data_onehot = cat_data.copy()
cat_data_onehot = pd.get_dummies(cat_data_onehot, columns=['interaction-type'])


cat_data_onehot.head()

cat_data_onehot_sklearn = cat_data.copy()

from sklearn.preprocessing import LabelBinarizer

lb = LabelBinarizer()
lb_results = lb.fit_transform(cat_data_onehot_sklearn['interaction-type'])
lb_results_df = pd.DataFrame(lb_results, columns=lb.classes_)

lb_results_df.head()

result_df = pd.concat([cat_data_onehot_sklearn, lb_results_df], axis=1)

result_df.head()
